#!/system/bin/sh
# veez21 @ xda-developers
# CRANKV2 @ github
# CRANKV2 @ Telegram

# Magisk Module ID **
ID="CRV2"

# Detect root
_name=$(basename $0)
ls /data >/dev/null 2>&1 || { echo "$ID needs to run as root!"; echo "type 'su' then '$_name'"; exit 1; }

# Magisk Mod Directory
[ -d "/sbin/.magisk" ] && MOUNTPATH="/sbin/.magisk/modules" || MOUNTPATH="$(find /dev -mindepth 2 -maxdepth 2 -type d -name ".magisk")/modules"
MODDIR="$MOUNTPATH/$ID"
[ ! -d $MODDIR ] && { echo "[!] CV2 Tweaks missing..."; exit 1; }

# Set path to your busybox if applicable
_bb=

# Load mod-util.sh
. $MODDIR/mod-util.sh || exit $?

# Set Log Files
mount -o remount,rw /cache 2>/dev/null
mount -o rw,remount /cache 2>/dev/null
# > Logs should go in this file
LOG=/sdcard/.CRV2/$ID.log
oldLOG=/sdcard/.CRV2/$ID-old.log
# > Verbose output goes here
VERLOG=/sdcard/.CRV2/Menu-verbose.log
oldVERLOG=/sdcard/.CRV2/Menu-verbose-old.log
stdoutLOG=$MODDIR/logs/Menu-STDOUT.log
oldstdoutLOG=$MODDIR/logs/Menu-STDOUT-old.log

# Start Logging verbosely
mv -f $VERLOG $oldVERLOG 2>/dev/null; mv -f $LOG $oldLOG 2>/dev/null; mv -f $stdoutLOG $oldstdoutLOG 2>/dev/null
# exec 3>&1
# exec 1>$stdoutLOG
set -x 2>$VERLOG

crv2_prof=$(getprop persist.crv2twtweaks.mode)
 	
case "${crv2_prof}" in
1)
  crv2_prof=Thermal
  ;;

  2)
    crv2_prof=Battery
    ;;

     3)
      crv2_prof=Balanced
      ;;

       4)
        crv2_prof=Performance
        ;;

        5)
         crv2_prof=Gaming
         ;;
      esac

if [[ "$(getprop init.svc.thermal-engine)" == "running" ]] || [[ "$(getprop init.svc.mi_thermald)" == "running" ]] || [[ "$(getprop init.svc.thermald)" == "running" ]] || [[ "$(getprop init.svc.thermalservice)" == "running" ]] || [[ "$(getprop init.svc.thermanager)" == "running" ]]; then
    ts=On
elif [[ "$(getprop init.svc.thermal-engine)" == "stopped" ]] || [[ "$(getprop init.svc.mi_thermald)" == "stopped" ]] || [[ "$(getprop init.svc.thermald)" == "stopped" ]] || [[ "$(getprop init.svc.thermalservice)" == "stopped" ]] || [[ "$(getprop init.svc.thermanager)" == "stopped" ]]; then
      ts=Off
else
    ts=Unknown
fi

V="2.0"
DEV="CRANKV2"
CDNM="THUNDER"
magisk=`magisk -c`
[[ "$(settings get global low_power)" == "1" ]] && low_power_mode="Enabled" || low_power_mode="Disabled"

Menu() {
    echo -e '\n'
    printf "\033c"
    echo "${Y}|   This is official CV2 Tweaks Menu.   |${N}"
    echo "${Y}|  Created and written by $DEV @ telegram  |${N}"
    echo ""
    echo "${Y}[*] Your device:${B} $(getprop ro.product.model) ${N}"
    echo ""
    echo "${Y}[*] Your current profile:${B} $crv2_prof ${N}"
    echo ""
    echo "${Y}[*] Version:${B} $V - $CDNM ${N}"
    echo ""
    echo "${Y}[*] Magisk version:${B} $magisk ${N}"
    echo ""
    echo "${Y}[*] Thermal state:${B} $ts ${N}"
    echo ""
    echo "--------------------------------------------"
    echo "${C}[*] Profile selector ${N}"
    echo "--------------------------------------------"
    echo ""
    echo "${C}[1] Thermal: Focused on making your device heat free, cold.${N}"
    echo ""
    echo "${B}[2] Battery: Focused on saving as much battery as possible.${N}"
    echo ""
    echo "${G}[3] Balanced: Focused on leaving the system balanced.${N}"
    echo ""
    echo "${Y}[4] Performance: Focused on maximizing your device's performance.${N}"
    echo ""
    echo "${R}[5] Gaming: Focused on improving your gaming/all performance.${N}"
    echo ""
    echo "--------------------------------------------"
    echo "${C}[*] Other options that might be helpful ${N}"
    echo "--------------------------------------------"
    echo ""
    if [[ "$ts" == "On" ]]; then
    echo "${Y}[6] Disable thermal-engine ${C}(May heat the device)${N}"
    echo ""
    elif [[ "$ts" == "Off" ]]; then
    echo "${Y}[6] Enable thermal-engine (Revert to normal)${N}"
    echo ""
    fi
    echo "${Y}[7] Fstrim on some partitions ${C}(Improves fluidity)${N}"
    echo ""
    echo "${Y}[8] Optimize application package ${C}(May take time)${N}"
    echo ""
    echo "${Y}[9] Clear RAM [ ${B}BASIC ${Y}] ${C}(This one will just drop all caches)${N}"
    echo ""
    echo "${Y}[10] Clear RAM [ ${B}HEAVY ${Y}] ${C}(This will drop cache and kill background apps)${N}"
    echo ""
    echo "${Y}[11] Clear RAM [ ${B}ADVANCED ${Y}] ${C}(This will drop cache and kill all apps)${N}"
    echo ""
    echo "${Y}[12] Clean up unnecessary files. ${C}(I.e. System logs, logs, debug...)${N}"
    echo ""
    echo "${Y}[13] Clear battery status ${C}(I recommend using only when your battery is at 100%)${N}"
    echo ""
    if [[ "$low_power_mode" == "Disabled" ]]; then
    echo "${Y}[14] Enable low power mode ${C}(This will enable maximum battery saver)${N}"
    echo ""
	elif [[ "$low_power_mode" == "Enabled" ]]; then
	echo "${Y}[14] Disable low power mode ${C}(Revert to normal)${N}"
	echo ""
	fi
    echo "${Y}[15] Telegram group ${C}(To answer your questions / report bugs)${N}"
    echo " "
    echo "${B}[16] About the module ${C}(Informations)${N}"
    echo " "
    echo "${B}[S] Send logs to developer ${C}(This will prepare the logs to be sent to dev)${N}"
    echo " "
    echo "${R}[U] Uninstall CV2 Tweaks ${C}(Will remove the module / files from your system)${N}"
    echo " "
    echo "${R}[0] Go out.${N}"
    echo " "
    echo -e '\n'
    echo "[${C} Enter${N} ]: \c"
    read opcao
    case $opcao in
    1) Opcao1 ;; 
    2) Opcao2 ;;
    3) Opcao3 ;;
    4) Opcao4 ;;
    5) Opcao5 ;;
    6) Opcao6 ;;
    7) Opcao7 ;; 
    8) Opcao8 ;;
    9) Opcao9 ;;
    10) Opcao10 ;;
    11) Opcao11 ;;
    12) Opcao12 ;;
    13) Opcao13 ;;
    14) Opcao14 ;;
    15) Opcao15 ;;
    16) Opcao16 ;;
    S) SendLogs ;;
    D) DeleteLogs ;;
    U) Uninstall ;;
    0) GoOut ;;
    *) Menu;;
    esac
    }

Opcao1 () {
    printf "\033c"
    echo "${G}Putting the profile in thermal mode...${N}"
    sleep 2
    echo ""
    setprop persist.crv2twtweaks.mode "1"
    sleep 2
    echo ""
    echo "${G}Process finished!${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "[${C} Enter${N} ]: \c"
    read opcao
    case $opcao in
    1) Return ;;
    0) GoOut ;;
    *) "${R}Unknown command, sorry.${N}" ; echo ; Opcao1 ;;
    esac
}

Opcao2 () {
    printf "\033c"
    echo "${G}Putting the profile in battery mode...${N}"
    sleep 2
    echo ""
    setprop persist.crv2twtweaks.mode "2"
    sleep 2
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "[${C} Enter${N} ]: \c"
    read opcao
    case $opcao in
    1) Return ;;
    0) GoOut ;;
    *) "${R}Unknown command, sorry.${N}" ; echo ; Opcao2  ;;
    esac
}

Opcao3 () {
    printf "\033c"
    echo "${G}Putting the profile in balanced mode...${N}"
    sleep 2
    echo ""
    setprop persist.crv2twtweaks.mode "3"
    sleep 2
    echo ""
    echo "${G}Process finished!${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "[${C} Enter${N} ]: \c"
    read opcao
    case $opcao in
    1) Return ;;
    0) GoOut ;;
    *) "${R}Unknown command, sorry.${N}" ; echo ; Opcao3  ;;
    esac
}

Opcao4 () {
    printf "\033c"
    echo "${G}Putting the profile in performance mode...${N}"
    sleep 2
    echo ""
    setprop persist.crv2twtweaks.mode "4"
    sleep 2
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "[${C} Enter${N} ]: \c"
    read opcao
    case $opcao in
    1) Return ;;
    0) GoOut ;;
    *) "${R}Unknown command, sorry.${N}" ; echo ; Opcao4  ;;
    esac
}

Opcao5 () {
    printf "\033c"
    echo "${G}Putting the profile in gaming mode...${N}"
    sleep 2
    echo ""
    setprop persist.crv2twtweaks.mode "5"
    sleep 2
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "[${C} Enter${N} ]: \c"
    read opcao
    case $opcao in
    1) Return ;;
    0) GoOut ;;
    *) "Unknown command, sorry." ; echo ; Opcao5  ;;
    esac
}

Opcao6 () {
    printf "\033c"
    if [[ "$ts" == "On" ]]; then
    echo "${G}Disabling thermal...${N}"
    echo "${R}[!] Warning: Your device may get hot.${N}"
    sleep 2
    stop thermal-engine
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
    elif [[ "$ts" == "Off" ]]; then
    echo "${G}Enabling thermal engine to normal...${N}"
    sleep 2
    start thermal-engine
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
    fi
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "[${C} Enter${N} ]: \c"
    read opcao
    case $opcao in
    1) Return ;;
    0) GoOut ;;
    *) "Unknown command, sorry." ; echo ; Opcao6  ;;
    esac
}
    
Opcao7 () {
    printf "\033c"
    echo "${G}Fstrim initializing, please wait. >.<${N}"
    echo ""
    fstrim -v /system
    fstrim -v /data
    fstrim -v /cache
    sleep 1
    echo ""
    echo "${G}Process finished!${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "[${C} Enter${N} ]: \c"
    read opcao
    case $opcao in
    1) Return ;;
    0) GoOut ;;
    *) "${R}Unknown command, sorry.${N}" ; echo ; Opcao7 ;;
    esac
}

Opcao8 () {
    printf "\033c"
    echo "${G}Optimizing application packages, please wait. >.<${N}"
    sleep 2
    echo ""
    echo "${G}[ ! ] this process CAN take between 5-10 minutes${N}"
    echo ""
    cmd package bg-dexopt-job
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "[${C} Enter${N} ]: \c"
    read opcao
    case $opcao in
    1) Return ;;
    0) GoOut ;;
    *) "${R}Unknown command, sorry.${N}" ; echo ; Opcao8  ;;
    esac
}

Opcao9 () {
    am start -a android.intent.action.MAIN -e toasttext "Clear RAM [ BASIC ]" -n bellavita.toast/.MainActivity
    printf "\033c"
    echo "${G}Dropping all caches, wait, it's very fast. ^^${N}"
    sleep 1
    sync
    echo "3" > "/proc/sys/vm/drop_caches"
    echo ""
    echo "${G}Process finished!${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "[${C} Enter${N} ]: \c"
    read opcao
    case $opcao in
    1) Return ;;
    0) GoOut ;;
    *) "${R}Unknown command, sorry.${N}" ; echo ; Opcao9  ;;
    esac
}

Opcao10 () {
    am start -a android.intent.action.MAIN -e toasttext "Clear RAM [ HEAVY ]" -n bellavita.toast/.MainActivity
    printf "\033c"
    echo "${G}Dropping caches and killing background processes, wait patiently... ^^${N}"
    sleep 1
    sync
    echo "3" > "/proc/sys/vm/drop_caches"
    am kill-all
    echo ""
    echo "${G}Process finished!${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo " "
    echo "[${C} Enter${N} ]: \c"
    read opcao
    case $opcao in
    1) Return ;;
    0) GoOut ;;
    *) "${R}Unknown command, sorry.${N}" ; echo ; Opcao10  ;;
    esac
}

Opcao11 () {
    am start -a android.intent.action.MAIN -e toasttext "Clear RAM [ ADVANCED ]" -n bellavita.toast/.MainActivity
    printf "\033c"
    echo "${G}Dropping all caches and killing all processes, wait there. ^^${N}"
    sleep 1
    sync
    echo "3" >"/proc/sys/vm/drop_caches"
    am kill-all
    sleep 3
    while IFS= read -r pkg_nm; do
        [[ ${pkg_nm} != "com.termux" ]] && [[ ${pkg_nm} != "jackpal.androidterm" ]] && [[ ${pkg_nm} != "yarolegovich.materialterminal" ]] && [[ ${pkg_nm} != "com.google.android.inputmethod.latin" ]] && [[ ${pkg_nm} != "com.termoneplus" ]] && [[ ${pkg_nm} != "com.pittvandewitt.viperfx" ]] && [[ ${pkg_nm} != "com.topjohnwu.magisk" ]] && [[ ${pkg_nm} != "ridmik.keyboard" ]] && [[ ${pkg_nm} != "com.maxmpz.equalizer" ]] && [[ ${pkg_nm} != "com.miui.screenrecorder" ]] && am force-stop ${pkg_nm}
    done <<<"$(pm list packages -e -3 | grep package | cut -f 2 -d ":")"
    echo "${G}Process finished!${N}"
    echo " "
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo " "
    echo "[${C} Enter${N} ]: \c"
    read opcao
    case $opcao in
    1) Return ;;
    0) GoOut ;;
    *) "${R}Unknown command, sorry.${N}" ; echo ; Opcao11  ;;
    esac
}

Opcao12 () {
    printf "\033c"
    echo "${G}Cleaning up useless residual files...${N}"
    sleep 1
    cleaner 2>/dev/null
    echo ""
    echo "${G}Process finished!${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "[${C} Enter${N} ]: \c"
    read opcao
    case $opcao in
    1) Return ;;
    0) GoOut ;;
    *) "${R}Unknown command, sorry.${N}" ; echo ; Opcao12  ;;
    esac
}

Opcao13 () {
    printf "\033c"
    echo "${G}Clearing battery status, please wait. >.<${N}"
    sleep 1
    rm -f /data/system/batterystats.bin
    echo ""
    echo "${G}Process finished!${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "[${C} Enter${N} ]: \c"
    read opcao
    case $opcao in
    1) Return ;;
    0) GoOut ;;
    *) "${R}Unknown command, sorry.${N}" ; echo ; Opcao13  ;;
    esac
}

Opcao14 () {
	printf "\033c"
    if [[ "$low_power_mode" == "Disabled" ]]; then
    echo "${G}Enabling low power mode...${N}"
    sleep 2
    echo ""
    settings put global low_power 1 2>/dev/null
    settings put global low_power_sticky 1 2>/dev/null
    settings put global app_standby_enabled 1 2>/dev/null
    settings put global forced_app_standby_enabled 1 2>/dev/null
    settings put global app_auto_restriction_enabled true 2>/dev/null
    settings put global forced_app_standby_for_small_battery_enabled 1 2>/dev/null
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
    elif [[ "$low_power_mode" == "Enabled" ]]; then
    echo "${G}Disabling low power mode...${N}"
    sleep 2
    settings put global low_power 0 2>/dev/null
    settings reset global low_power 2>/dev/null
    settings put global low_power_sticky 0 2>/dev/null
    settings reset global low_power_sticky 2>/dev/null
    settings put global app_standby_enabled 1 2>/dev/null
    settings reset global app_standby_enabled 2>/dev/null
    settings put global forced_app_standby_enabled 0 2>/dev/null
    settings reset global forced_app_standby_enabled 2>/dev/null
    settings put global app_auto_restriction_enabled false 2>/dev/null
    settings reset global app_auto_restriction_enabled 2>/dev/null
    settings put global forced_app_standby_for_small_battery_enabled 0 2>/dev/null
    echo ""
    echo "${G}Process finished.${N}"
    echo ""
    fi
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "[${C} Enter${N} ]: \c"
    read opcao
    case $opcao in
    1) Return ;;
    0) GoOut ;;
    *) "${R}Unknown command, sorry.${N}" ; echo ; Opcao14  ;;
    esac
}

Opcao15 () {
    printf "\033c"
    echo "${G}Access telegram group (support)${N}"
    sleep 2
    printf "\033c"
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "[${C} Enter${N} ]: \c"
    read opcao
    case $opcao in
    1) Return ;;
    0) GoOut ;;
    *) "${R}Unknown command, sorry.${N}" ; echo ; Opcao15  ;;
    esac
}

Opcao16 () {
    printf "\033c"
    echo "${G}Module informations:${N}"
    echo "${C}This module is focused on your experience, that's right, with this module you can choose several profiles according to your taste :)${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "[${C} Enter${N} ]: \c"
    read opcao
    case $opcao in
    1) Return ;;
    0) GoOut ;;
    *) "Unknown command, sorry." ; echo ; Opcao16  ;;
    esac
}

SendLogs () {
    printf "\033c"
    echo "${G}Creating directory for logs....${N}"
    echo ""
    sleep 1.5
    mkdir /storage/emulated/0/crv2twtweaks-logs
    echo "${G}Created directory '/storage/emulated/0/crv2twtweaks-logs'${N}"
    echo ""
    echo "${G}Copying logs to directory and compressing...${N}"
    echo ""
    sleep 1.5
    cp -R /storage/emulated/0/.CRV2 /storage/emulated/0/crv2twtweaks-logs
    rm -rf /storage/emulated/0/crv2twtweaks-logs/.CRV2/README.md
    mv /storage/emulated/0/crv2twtweaks-logs/.CRV2 /storage/emulated/0/crv2twtweaks-logs/crv2twtweaks-logs
    cd /storage/emulated/0/crv2twtweaks-logs
    tar -czvf crv2twtweaks-logs.tar.gz crv2twtweaks-logs
    rm -rf /storage/emulated/0/crv2twtweaks-logs/crv2twtweaks-logs
    sleep 2
    echo ""
    echo "${G}Done, now u can send the logs to the developer.${N}"
    sleep 0.5
    echo ""
    echo "${G}After sending the logs, click on delete logs option.${N}"
    sleep 0.5
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo "${B}[ D ] Delete logs (recommended)${N}"
    echo ""
    echo "[${C} Enter${N} ]: \c"
    read opcao
    case $opcao in
    0) GoOut ;;
    D) DeleteLogs ;;
    *) "Unknown command, sorry." ; echo ; Menu  ;;
    esac
}

DeleteLogs () {
    printf "\033c"
    echo "${G}Deleting logs automatically...${N}"
    echo ""
    sleep 1
    rm -rf /storage/emulated/0/raidentweaks-logs
    echo "${G}Logs deleted!${N}"
    echo ""
    echo "${B}[ 1 ] Return${N}"
    echo "${B}[ 0 ] Go out${N}"
    echo ""
    echo "[${C} Enter${N} ]: \c"
    read opcao
    case $opcao in
    1) Return ;;
    0) GoOut ;;
    *) "Unknown command, sorry." ; echo ; Menu  ;;
    esac
}

Uninstall () {
    printf "\033c"
    echo "${G}Okay, ... uninstalling CV2 Tweaks module...${N}"
    sleep 2
    rm -rf /data/adb/modules/CRV2
    rm -rf /storage/emulated/0/.CRV2
    rm -rf /data/local/CV2Tweaks.apk
    rm -rf /data/local/CV2Toast.apk
    echo ""
    echo "${G}Module uninstalled, now we will restart your device...${N}"
    sleep 4
    echo "${G}In a few seconds the device will restart.${N}"
    echo ""
    echo -ne '${R}>>>                       [20%]\r${N}'
    sleep 1.5
    echo -ne '${R}>>>>>>>                   [40%]\r{N}'
    sleep 1.5
    echo -ne '${R}>>>>>>>>>>>>>>            [60%]\r${N}'
    sleep 1.5
    echo -ne '${R}>>>>>>>>>>>>>>>>>>>>>>>   [80%]\r${N}'
    sleep 1.5
    echo -ne '${R}>>>>>>>>>>>>>>>>>>>>>>>>>>[100%]\r${N}'
    echo -ne '\n'
    reboot system
}

Return() {
    printf "\033c"
    rtksmenu
    printf "\033c"
}

GoOut() {
    printf "\033c"
    echo "${B}Bye, Hope u enjoy my work!${N}"
    exit
}
printf "\033c"
Menu